@page "/login"
@using DomainModels
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@inject Blazor.Services.APIService Api
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject Blazor.Services.TokenStorage Storage
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavManager

<h1>Log ind</h1>

<EditForm Model="model" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="auth-card">
        <div class="mb-3">
            <label for="id">E-mail eller brugernavn</label>
            <InputText id="id" class="form-control" @bind-Value="model.Identifier" />
        </div>

        <div class="mb-3">
            <label for="pwd">Adgangskode</label>
            <InputText id="pwd" class="form-control" type="password" @bind-Value="model.Password" />
        </div>

        @if (!string.IsNullOrWhiteSpace(Error))
        {
            <div class="alert alert-danger">@Error</div>
        }

        <button class="btn btn-primary" disabled="@Loading">Log ind</button>

        <p class="muted" style="margin-top:.75rem">
            Har du ikke en bruger? <a href="/register">Opret dig her</a>.
        </p>
    </div>
</EditForm>

@code {
    private LoginVm model = new();
    private bool Loading;
    private string? Error;

    private sealed class LoginVm
    {
        public string Identifier { get; set; } = string.Empty; 
        public string Password { get; set; } = string.Empty;
    }

    private async Task HandleLogin()
    {
        Error = null;
        Loading = true;

        try
        {
            var id = model.Identifier?.Trim() ?? "";
            var pwd = model.Password ?? "";

            // Unifiedlogin staff (AD) > kunde (Neon db)
            string? token = await Api.UnifiedLoginAsync(id, pwd);

            // Fallback til auth/login for kunder (Neon db)
            if (string.IsNullOrWhiteSpace(token) && LooksLikeEmail(id))
            {
                var res = await Api.LoginAsync(new LoginDto { Email = id, Password = pwd });
                if (res.IsSuccessStatusCode)
                {
                    var dto = await res.Content.ReadFromJsonAsync<LoginResponseDto>();
                    token = dto?.Token;
                }
            }

            // Fallback til bruger (legacy)
            if (string.IsNullOrWhiteSpace(token))
                token = await Api.LegacyLoginGetTokenAsync(id, pwd);

            if (string.IsNullOrWhiteSpace(token))
            {
                Error = "Forkert e-mail/brugernavn eller adgangskode.";
                return;
            }

            await SaveTokenAsync(token);
            NavManager.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            Error = "Login-fejl: " + ex.Message;
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task SaveTokenAsync(string token)
    {
        await LocalStorage.SetItemAsync("authToken", token);
        await Storage.SetTokenAsync(token);
        Api.SetBearer(token);

        if (AuthProvider is Blazor.Services.AuthStateProvider custom)
            await custom.MarkUserAsAuthenticatedAsync(token);
    }

    private static bool LooksLikeEmail(string s)
        => !string.IsNullOrWhiteSpace(s) && s.Contains('@') && s.IndexOf('.') > s.IndexOf('@');
}
