@page "/personale"
@using DomainModels
@using System.Net.Http.Json
@using System.Globalization
@inject HttpClient Http
@inject IConfiguration Config
@inject TokenStorage Tokens
@inject NavigationManager Nav
@attribute [Authorize(Roles = "Admin,Manager")]

<h3>Personale — Oversigt</h3>

<div class="row g-3">
    <div class="col-md-4">
        <div class="card shadow-sm h-100">
            <div class="card-body">
                <h5 class="card-title">Tickets (seneste)</h5>

                <div class="d-flex gap-4 mb-3">
                    <div>
                        <div class="h4 mb-0">@_tickets.Count(t => t.Status == TicketStatus.Ny)</div>
                        <small>Ny</small>
                    </div>
                    <div>
                        <div class="h4 mb-0">@_tickets.Count(t => t.Status == TicketStatus.Open)</div>
                        <small>Under beh.</small>
                    </div>
                    
                </div>

                <div class="d-flex gap-2 flex-wrap">
                    <button class="btn-chip" @onclick='@(() => Nav.NavigateTo("/ticketadmin"))'>
                        <i class="bi bi-inboxes"></i> Åbn Ticketdesk
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-8">
        <div class="card shadow-sm h-100">
            <div class="card-body">
                <h5 class="card-title">Genveje</h5>

                <div class="shortcut-grid">
                    <a class="shortcut" href="/ticketadmin">
                        <i class="bi bi-chat-dots"></i>
                        <div>
                            <span class="shortcut-title">Ticketdesk</span>
                            <small class="shortcut-desc">Håndter sager & chat</small>
                        </div>
                    </a>
                    <a class="shortcut" href="/personale/bookings">
                        <i class="bi bi-journal-bookmark"></i>
                        <div>
                            <span class="shortcut-title">Bookinger</span>
                            <small class="shortcut-desc">Søg & redigér</small>
                        </div>
                    </a>
                    <a class="shortcut" href="/personale/rooms">
                        <i class="bi bi-door-closed"></i>
                        <div>
                            <span class="shortcut-title">Værelser</span>
                            <small class="shortcut-desc">Tildel & status</small>
                        </div>
                    </a>
                    <a class="shortcut" href="/personale/guests">
                        <i class="bi bi-people"></i>
                        <div>
                            <span class="shortcut-title">Gæster</span>
                            <small class="shortcut-desc">Opslag & kontakt</small>
                        </div>
                    </a>
                    <a class="shortcut" href="/personale/reports">
                        <i class="bi bi-graph-up"></i>
                        <div>
                            <span class="shortcut-title">Rapporter</span>
                            <small class="shortcut-desc">Belægning & omsætning</small>
                        </div>
                    </a>
                    <a class="shortcut" href="/personale/settings">
                        <i class="bi bi-gear"></i>
                        <div>
                            <span class="shortcut-title">Indstillinger</span>
                            <small class="shortcut-desc">Roller & adgang</small>
                        </div>
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row g-3 mt-2">
    <div class="col-12">
        <div class="card shadow-sm">
            <div class="card-body">
                <h5 class="card-title">Seneste aktiviteter</h5>

                @if (_tickets.Any())
                {
                    <ul class="list-group list-group-flush">
                        @foreach (var t in _tickets.OrderByDescending(x => x.CreatedAt).Take(5))
                        {
                            <li class="list-group-item">
                                <a href="@($"/ticketadmin/{t.Id}")" class="d-flex justify-content-between align-items-center text-decoration-none">
                                    <div>
                                        <b>@t.Number</b> — @t.Title
                                        <div class="text-muted small">
                                            @t.Department · @t.CreatedAt.ToLocalTime().ToString("dd.MM.yyyy HH:mm")
                                        </div>
                                    </div>
                                    <span>
                                        <span class="badge bg-secondary">@t.Status</span>
                                        <span class="badge bg-info">@t.Priority</span>
                                    </span>
                                </a>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <em>Ingen aktiviteter endnu</em>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<TicketDto> _tickets = new();
    private string? _filter;

    protected override async Task OnInitializedAsync()
    {
        var token = await Tokens.GetTokenAsync();
        if (string.IsNullOrWhiteSpace(token))
        {
            Nav.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(Nav.Uri)}");
            return;
        }

        var apiBase = Config["ApiEndpoint"] ?? Nav.BaseUri;
        var url = new Uri(new Uri(apiBase), "tickets/desk");

        var req = new HttpRequestMessage(HttpMethod.Get, url);
        req.Headers.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var res = await Http.SendAsync(req);
        if (res.IsSuccessStatusCode)
        {
            _tickets = await res.Content.ReadFromJsonAsync<List<TicketDto>>() ?? new();
        }
    }

    private void SetFilter(string? f) => _filter = f;
}
